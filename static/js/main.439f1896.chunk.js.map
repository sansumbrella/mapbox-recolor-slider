{"version":3,"sources":["MapContainer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["MapContainer","_PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mapContainer","mapboxgl","accessToken","createRef","inherits","createClass","key","value","initializeMap","updateMap","_this2","container","current","map","style","hash","zoom","center","on","setState","_this$props","buildingPalette","waterPalette","palettePosition","buildings","colorToString","mixPalette","water","waterway","clamp","waterShadow","console","log","state","setPaintProperty","react_default","a","createElement","className","ref","PureComponent","mix","b","t","p","h","s","l","c","concat","Math","min","max","App","sliderValue","MapContainer_MapContainer","htmlFor","type","name","step","onChange","amt","parseFloat","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.439f1896.chunk.js","sourcesContent":["import React, { PureComponent, createRef, RefObject } from \"react\";\nimport * as mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"./MapContainer.css\";\n\n// normalized color values\n// all properties in [0, 1]\nexport interface Color {\n  h: number;\n  s: number;\n  l: number;\n}\n\nexport interface Props {\n  accessToken: string;\n  //\n  buildingPalette: [Color, Color];\n  waterPalette: [Color, Color];\n  palettePosition: number; // [0, 1]\n}\nexport interface State {\n  map?: mapboxgl.Map;\n}\n\nexport class MapContainer extends PureComponent<Props, State> {\n  mapContainer: RefObject<HTMLDivElement>;\n\n  constructor(props: Props) {\n    super(props);\n    (mapboxgl as any).accessToken = props.accessToken;\n    this.mapContainer = createRef();\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  componentDidUpdate() {\n    this.updateMap();\n  }\n\n  initializeMap() {\n    const container = this.mapContainer.current;\n    if (container !== null) {\n      const map = new mapboxgl.Map({\n        container,\n        style: \"mapbox://styles/david-wicks/cjy4jrx2p3os71cmr0yx3eia4\",\n        hash: true,\n        zoom: 15.84,\n        center: [-122.40802, 37.807816]\n      });\n\n      map.on(\"style.load\", () => {\n        this.setState({\n          map\n        });\n      });\n    }\n  }\n\n  updateMap() {\n    const { buildingPalette, waterPalette, palettePosition } = this.props;\n    const buildings = colorToString(mixPalette(buildingPalette, palettePosition));\n    const water = colorToString(mixPalette(waterPalette, palettePosition));\n    const waterway = colorToString(mixPalette(waterPalette, clamp(palettePosition - 0.1)));\n    const waterShadow = colorToString(mixPalette(waterPalette, clamp(palettePosition + 0.1)));\n\n    console.log(buildingPalette, waterPalette);\n    console.log(buildings, water, waterway);\n\n    const { map } = this.state;\n    if (map) {\n      map.setPaintProperty(\"building\", \"fill-color\", buildings);\n      map.setPaintProperty(\"water\", \"fill-color\", water);\n      map.setPaintProperty(\"waterway\", \"line-color\", waterway);\n      map.setPaintProperty(\"water-shadow\", \"fill-color\", waterShadow);\n    }\n  }\n\n  render() {\n    return <div className=\"map-container fullscreen\" ref={this.mapContainer} />;\n  }\n}\n\nfunction mix(a: number, b: number, t: number) {\n  return a + (b - a) * t;\n}\n\nfunction mixPalette(p: [Color, Color], t: number) {\n  return {\n    h: mix(p[0].h, p[1].h, t),\n    s: mix(p[0].s, p[1].s, t),\n    l: mix(p[0].l, p[1].l, t)\n  };\n}\n\nfunction colorToString(c: Color) {\n  return `hsl(${c.h * 360}, ${c.s}, ${c.l})`;\n}\n\nfunction clamp(a: number) {\n  return Math.min(1.0, Math.max(a, 0.0));\n}\n","import React, { PureComponent } from \"react\";\nimport \"./App.css\";\nimport { MapContainer } from \"./MapContainer\";\n\ninterface State {\n  sliderValue: number;\n}\n\ninterface Props {}\n\nclass App extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      sliderValue: 0.5\n    };\n  }\n  render() {\n    const { sliderValue } = this.state;\n    return (\n      <div className=\"App\">\n        <MapContainer\n          accessToken=\"pk.eyJ1IjoiZGF2aWQtd2lja3MiLCJhIjoiY2p5NGpqN3p6MDBoYzNncDhoM283ZjNubSJ9.CR6hBpiQ37nyNGIcdgffbQ\"\n          buildingPalette={[{ h: 0.0, s: 0.0, l: 1.0 }, { h: 0.1, s: 0.1, l: 0.15 }]}\n          waterPalette={[{ h: 0.6, s: 0.5, l: 0.8 }, { h: 0.61, s: 0.5, l: 0.25 }]}\n          palettePosition={sliderValue}\n        />\n        <div className=\"controls\">\n          <label htmlFor=\"mix\">Mix</label>\n          <input\n            type=\"range\"\n            name=\"mix\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.01\"\n            value={sliderValue}\n            onChange={amt => {\n              this.setState({\n                sliderValue: parseFloat(amt.target.value)\n              });\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}